#include<bits/stdc++.h>


int detectCycleInDirectedGraph(int n ,  vector < pair < int, int > > &edges) {
  
    // Create adjaceny list
    
    unordered_map< int, list<int> > adj;
    
    for(int i=0;i<edges.size();i++){       
        
        int u = edges[i].first-1;
        int v = edges[i].second-1;
        
        adj[u].push_back(v);
        
    }
    
    
    
     //    Indegree .. 
    
        vector<int> InDegree(n,0);  // n = no  of vertices .. 
    
        for(auto i : adj){
            for(auto j : i.second){
                InDegree[j]++;
            }
        }
   
    
     //  0 indegree wale ko push krdo  In queue (: 
    
    queue<int> q;
    
    for(int i=0;i<n;i++){
        
        if(InDegree[i] == 0 ){
            q.push(i);
        }    
        
    }
    
    
    
    // using bfs ....   kahn's Algo ... 
    
    int count=0;
    
    while(!q.empty()){
        
        int front = q.front();
        q.pop();
        
        count++;
        
        for(auto neigh : adj[front]){
            InDegree[neigh]--;
            
            if(InDegree[neigh] == 0){
                q.push(neigh);
            }
            
        }
        
    }
    
    
    return count!=n;
    
    //  Time Comp : O(V+E);
    //  Space Comp : O(V+E);
    
    
    
    
    
}