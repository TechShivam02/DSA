
#include<bits/stdc++.h>

bool  isCycleDFS(int src , int par , unordered_map<int,bool> &visited ,  unordered_map<int, list<int> > &adj ){
    
    visited[src] = true;
    
    
    for(auto ele : adj[src]){
        
            if(!visited[ele]){ 
                
                 bool isCycleInDFS = isCycleDFS(ele , src , visited , adj);
                    
                    if(isCycleInDFS){
                        return true;
                    }
                
            }
        
            else if(ele != par ){
                return true;
            }
       
         
    }
    
    
}


string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
    //     create adjacency list  
        
    unordered_map< int, list<int> > adj;
    
    for(int i=0; i<m ; i++)
    {
        
        int u = edges[i][0];
        int v = edges[i][1];
        
        adj[u].push_back(v);
        adj[v].push_back(u);
        
    }   
    
    
    unordered_map<int,bool> visited;
    
    
    // To handle disConnected graph ... 
    
    
    for(int src=0;src<n;src++){
        
        if(!visited[src]){
           
             
            bool ans = isCycleDFS(src , -1 ,  visited , adj );
            
            if(ans == true){
                 return "Yes";
            }
        }
        
    } // for loop ... 
    
    
    return "No";
    
    
    
    
}
