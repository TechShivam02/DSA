#include<bits/stdc++.h>


bool isCycleDfsDirected(int src , unordered_map<int, bool > &visited , unordered_map<int, bool > &dfsVisited , unordered_map< int,list<int> > &adj){
    
    visited[src] = true;
    
    
    for(auto ele : adj[src]){
        
        dfsVisited[src] = true;
    
        if(visited[ele] && dfsVisited[ele] ) {
            return true;
        }
        
        
        else {
              bool IsCycle =  isCycleDfsDirected(ele , visited , dfsVisited , adj);
            
                if(IsCycle){
                    return true;
                }
            
        }

        
        
    dfsVisited[src] = false;
        
 }
   

    
    return false;
    
    
}


int detectCycleInDirectedGraph(int n, vector < pair <int, int> > & edges) {
         
    //     create adjacency list
    
    unordered_map<int, list<int> > adj;
    
    for(int i=0;i<edges.size();i++){
        
        int u  = edges[i].first;
        int v  = edges[i].second;
        
        adj[u].push_back(v);   // Bcz directed graph .... 
    }
    
    
    //  call DFS  for all componenets ... 
    
    unordered_map<int, bool > visited;
    unordered_map<int, bool > dfsVisited;
    
    for(int src=1;src<=n;src++){          // Node's  start from 1 
            
        if(!visited[src]){
            
            bool isCycle = isCycleDfsDirected(src , visited , dfsVisited , adj);
            
            if(isCycle){
                return true;
            }
          
       }
        
 }
    
    
    
    return false;
}    




  			Time Comp  : O(V+E);
			Space Comp : O(V);
