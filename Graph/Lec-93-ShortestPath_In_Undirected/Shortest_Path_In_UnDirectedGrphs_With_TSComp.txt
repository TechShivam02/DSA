#include<unordered_map>
#include<queue>
#include<list>

vector<int> shortestPath( vector< pair<int,int> > edges , int n , int m, int src , int t){
    
        unordered_map<int , list<int> >  adj;
    
    for(int i=0;i<m;i++){
        int u = edges[i].first;
        int v = edges[i].second;
        
        adj[u].push_back(v);
        adj[v].push_back(u);
        
    }
    
    
    unordered_map<int,bool > visited;
    unordered_map<int,int > parent;
    
    queue<int> q;
    
    q.push(src);
    visited[src] = true;
    parent[src] = -1;
    
    
    while(!q.empty()){
        
        int front = q.front();
        q.pop();
        
        for(auto neigh : adj[front]){
            
            if(!visited[neigh]){
                  visited[neigh] = true;
                   parent[neigh] = front;
                
                q.push(neigh);
                
            }
            
        }
        
    }
    
    
    vector<int> ans;
    
        // src = 1 
        // dest = 8
    
    int dest = t;
    
    int temp = dest;
    
    while(temp != src){
        
        ans.push_back(temp);
        temp = parent[temp];
        
    }
    
    
    ans.push_back(temp);
    
    
    reverse(ans.begin(),ans.end());
    
    return ans;


	// Time comp : O(V+E);
	// Space comp : O(V+E);

}


