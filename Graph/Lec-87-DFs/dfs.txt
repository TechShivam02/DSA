#include<bits/stdc++.h>

void  dfs(int src ,  unordered_map<int,bool> &visited ,  unordered_map<int , list<int> > &adj , vector<int> &ans ) {
    
    visited[src] = true;
    ans.push_back(src);
    
    for(auto i : adj[src]){
        
        if(!visited[i]){
                dfs(i,visited , adj , ans);
        }  
    }
    
    
    
}
vector<vector<int>> depthFirstSearch(int V, int E, vector<vector<int>> &edges)
{
    
        unordered_map<int , list<int> > adj;
    
    
    // step 1 ,  Create a adj List
        for(int i=0;i<edges.size();i++){
                    int u = edges[i][0];
                    int v = edges[i][1];
            
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
    
    
    
    vector< vector<int> > VecAns;
    
    unordered_map<int,bool> visited;
    
    
    for(int src=0;src<V;src++){
        
        if(!visited[src]){
            
            vector<int> ans;
            dfs(src ,visited ,  adj , ans ) ;
            
            VecAns.push_back(ans);
        
        }
        
    }
    
    return VecAns;
    
    
        
    
}
    