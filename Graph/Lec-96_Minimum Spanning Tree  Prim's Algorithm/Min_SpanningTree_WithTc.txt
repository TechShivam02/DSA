#include<bits/stdc++.h>

vector<pair<pair<int, int>, int>> calculatePrimsMST(int n, int m, vector< pair < pair<int, int> , int> > &g)
{
  
    // create adj list
    unordered_map< int , list< pair<int,int> >  > adj;
    
    for(int i=0;i<g.size();i++){
        
        int u = g[i].first.first-1;
        int v = g[i].first.second-1;
        
        
        int wt = g[i].second;
        
        adj[u].push_back(make_pair(v,wt));   // undirected
        adj[v].push_back(make_pair(u,wt));   // undirected 
        
    }
    
    // need 3 extra data str , key  mst  parent 
    
    vector<int> key(n);
    vector<int> mst(n);
    
    vector<int> parent(n);
    
    
    
    // intialize all key value with  Inf  , parent with -1 , mst with false; 
    
    for(int i=0 ; i<n ; i++){
        key[i] = INT_MAX;
        parent[i] = -1;
        mst[i] = false;
    }
    
    
    
   //   Start the algo .... 
    
    key[0] = 0;
    parent[0] = -1;
    
    
    
  for(int i=0;i<n-1;i++){
    
        int mini = INT_MAX;
        int u;
        
    
       // Step 1 :  Find the u
        
              for(int j=0;j<n;j++){
                      if(mst[j] == false  && key[j] < mini){
                      u=j;
                      mini = key[j];
                  }
              }
    
     // Step 2 : mark true in mst 
    
      
            mst[u] = true;
    
      
      
    // Step 3 : find all neigh and do the Appropriate operations ..
        
        for(auto neigh : adj[u]){

            int destN = neigh.first;
            int wt = neigh.second;

            if( mst[destN] == false && wt < key[destN] ){
                key[destN] = wt;

                parent[destN] = u;
            }

        }
    
    
    
  }   // for loop  i 
    
    
     
    vector< pair < pair<int, int> , int > > ans;
    
    for(int i=1 ; i<n;i++){
        ans.push_back( make_pair ( make_pair(parent[i]+1 , i+1) , key[i] ) );
    }
    
    
    return ans;
    
    
    // Time Comp : O( V*V);
    
    
    
    
}
