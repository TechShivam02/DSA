#include <bits/stdc++.h>
using namespace std;




int static dp[11][51];   // Intializing dp[max eggs +1 ][ max floor +1];    // +1  so that it would'nt create any problem in indexing in future 




int solve(int e , int f ){
    
    if(f==0 || f==1){                   // Base Case
        return f;
    }
    
    if(e==1){                      // Base Case
        return f;     // Return f
    }
    
    
    
    
    if(dp[e][f] !=-1) {
        return dp[e][f];
    }
         
         
            
                
    int ans=INT_MAX;
    
    for(int k=1 ; k<=f ; k++){
        
        int low , upper;
        
        
        if(dp[e-1][k-1]!=-1){
            low=dp[e-1][k-1];
        }
        else{
            low=solve(e-1 , k-1);
            dp[e-1][k-1]=low;
        }
        
        
        
        if(dp[e][f-k]!=-1){
            upper=dp[e][f-k];
        }
        else{
            upper=solve(e , f-k);
            dp[e][f-k]=upper;
        }
        
        
        
        
        
        int attempt = 1+max(low,upper);
        
        ans=min(ans,attempt);
    }
    
       
       dp[e][f]=ans;
    
    
    
    return ans;
    
    
    
}
    


int main()
{
    
    memset(dp , -1 , sizeof(dp));               // insider function , 1st - array , 2nd - to whome value with intialized  (Only 0 Or -1 ) , sizeof(array) )    
    // It will intialized the dp array (2d array ) , with -1 
    
    
    
    int eggs=3;
    int flooors = 5;
    
    cout<<solve(eggs , flooors )<<endl;
    
    
    return 0;
}



