#include <bits/stdc++.h>
using namespace std;

/*

          // Using Recursion    


int KnapSack( int wt[] ,int val[] , int Bcap , int n ){
    
    if(n==0 || Bcap==0){    // Base Case
        return 0;
    }
    
    if(wt[0] <= Bcap){
        
        int conc = val[0] + KnapSack( wt ,val , Bcap - wt[0], n );     // if inc then call on itself again , but dont forgot to reduce the new bag cap 
        int Notconc = KnapSack( wt+1 ,val+1 , Bcap , n-1 );
        
        
        return max(conc,Notconc) ;
        
            
    }
    
    else{
        return KnapSack( wt+1 ,val+1 , Bcap , n-1 );
    }
    
    return 0;
}




*/








/*

             //  KnapSack Memorization     -- Recursion + 2 Lines



int KnapSack( int wt[] ,int val[] , int Bcap , int n , int **array){
    
    
    if(n==0 || Bcap==0){    // Base Case
        return 0;
    }
    
    if(array[n][Bcap] !=-1){           // using if already stored ans , then return it 
        return array[n][Bcap];
    }
    
    if(wt[0] <= Bcap){
        
        int conc = val[0] + KnapSack( wt ,val , Bcap - wt[0], n ,array);     // if inc then call on itself again , but dont forgot to reduce the new bag cap 
        int Notconc = KnapSack( wt+1 ,val+1 , Bcap , n-1 ,array);
        
        array[n][Bcap]= max(conc,Notconc);        // store the ans 
        
        return  array[n][Bcap];
            
    }
    
    else{
        
        array[n][Bcap]=KnapSack( wt+1 ,val+1 , Bcap , n-1 ,array);  // store the ans , then return 
        
        return array[n][Bcap];
        
    }
    
    return 0;
}




*/







/*
void KnapSack( int wt[] ,int val[] , int row , int col , int **array){
    
    
    for(int i=0;i<row;i++){
        
        for(int j=0;j<col;j++){
            
            if(i==0 || j==0){
                array[i][j]=0;
            }
            
            else{
                
                
                int conc=-1;
                
                if( j - wt[i-1] >= 0){
                    
                    conc=val[i-1] + array[i][j - wt[i-1]];   // current val from array + array[same row] [ new ans , Col ] ;
                    
                    
                    // 1 Line change Code - arr[i][..]  , instead of arr[i-1][...]   
                    
                    
                    
                }
               
               
                
                int notConc=array[i-1][j];
                
                
                int ans = max(conc,notConc);
                
                array[i][j]=ans;
                
            }
            
            
        }    // col for loop
    
        
    }   // for row loop
    
    
    
    
    for(int i=0;i<row;i++){
        for(int j=0;j<col;j++){
           
           cout<<array[i][j]<<" ";
           
        }
        
        cout<<endl;
    }
    
    
}




*/









int main()
{
    /*
    
    
            // Using Recursion Only  // Below With Memorization
    
     int n=3;
    
    int Bcap=100;    // Bag Capacity  ... 
    
    
    int wt[n]={5,10,15};
    int val[n]={10,30,20};
    
  
    
    
    
    //   cout<<KnapSack(wt,val , Bcap ,n )<<endl;      // Using Recursion ... 
    
    

    */





    
    /*      // Memorization  
    
   
   int n=3;
    
    int Bcap=100;    // Bag Capacity  ... 
    
    
    int wt[n]={5,10,15};
    int val[n]={10,30,20};
    
    
    int** array = new int*[n+1];
  
    
    for (int i = 0; i < n+1; i++){
         
         array[i] = new int[Bcap+1];    // for every row set , Bcap+1  cols    or  2d array[n+1][Bcap+1];
         
    }
    
    
   for (int i = 0; i < n+1; i++){
         
         for(int j=0;j<Bcap+1;j++){
             array[i][j]=-1;
         }
        
    }
    
    
    // cout<<KnapSack(wt,val , Bcap ,n )<<endl;
    
    
    cout<<KnapSack(wt,val , Bcap ,n , array )<<endl;
    
    
    */       // Using Memorization .... 
    
    
    
    
    
    
    
    
    
    
    /*
               // Using Top Down 
    
    
      int n=3;
    
    int Bcap=100;    // Bag Capacity  ... 
    
    
    int wt[n]={5,10,15};
    int val[n]={10,30,20};
    
    
    
    
    
    int** array = new int*[n+1];
  
    
    for (int i = 0; i < n+1; i++){
         
         array[i] = new int[Bcap+1];    // for every row set , Bcap+1  cols    or  2d array[n+1][Bcap+1];
         
    }
    
    
    
     KnapSack(wt,val , n+1 , Bcap+1 , array );
    
    // The last array [row][col] = Final Ans 
    
    
    */
    
    
    return 0;
}





